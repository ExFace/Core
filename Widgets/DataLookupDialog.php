<?php
namespace exface\Core\Widgets;

use exface\Core\Factories\WidgetFactory;
use exface\Core\Interfaces\Widgets\iUseInputWidget;
use exface\Core\Interfaces\Widgets\iSupportMultiSelect;

/**
 * An advanced search dialog allowing the user to search and select data entries.
 * 
 * If no widget is specified by the user, the action will produce an autogenerated
 * `DataLookupDialog` - a search dialog based on default-display settings in the metamodel 
 * of the object being searched. This basically means, that the lookup-dialog will show the 
 * same table as the `InputComboTable` and provide filter over every visible column.
 * 
 * You can customize the lookup dialog by specifying a custom widget to be shown:
 * 
 * ```
 * {
 *  "widget_type": "DataLookupDialog",
 *  "widgets": [
 *      {
 *          "object_alias": "...",
 *          "widget_type": "DataTable",
 *          "filters": [
 *              {
 *                "attribute_alias": "..."
 *              }
 *          ],
 *          "columns": [
 *              {
 *                "attribute_alias": "..."
 *              }
 *          ]
 *      }
 *  ]
 * }
 * 
 * ```
 *
 * @author Andrej Kabachnik
 *        
 */
class DataLookupDialog extends Dialog
{
    private $multi_select = null;
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Widgets\Container::getWidgets()
     */
    public function getWidgets(callable $filter = null)
    {
        if (parent::hasWidgets() === false) {
            /* @var $data_table \exface\Core\Widgets\Data */
            $data_table = WidgetFactory::create($this->getPage(), 'DataTableResponsive', $this);
            $data_table->setMetaObject($this->getMetaObject());
            $data_table->setMultiSelect($this->getMultiSelect());
            $data_table->getPaginator()->setCountAllRows(false);
            
            // If the table has no columns, determine them from the model
            if ($data_table->hasColumns() === false) {
                $defaultDisplayAttrs = $data_table->getMetaObject()->getAttributes()->getDefaultDisplayList();
                switch (true) {
                    // If the object has default display attributes, use them
                    case $defaultDisplayAttrs->isEmpty() === false:
                        foreach ($defaultDisplayAttrs as $attr) {
                            $data_table->addColumn($data_table->createColumnFromAttribute($attr), $attr->getDefaultDisplayOrder());
                        }
                        break;
                    // Otherwise use the object's label if there is one
                    case $data_table->getMetaObject()->hasLabelAttribute() === true:
                        $data_table->addColumn($data_table->createColumnFromAttribute($data_table->getMetaObject()->getLabelAttribute()));
                        break;
                    // If neither a label nor default-display attributes exist, see if the UID is not hidden
                    case $defaultDisplayAttrs->isEmpty() && $data_table->getMetaObject()->hasUidAttribute() === true && $data_table->getMetaObject()->getUidAttribute()->isHidden() === false:
                        $data_table->addColumn($data_table->createColumnFromAttribute($data_table->getMetaObject()->getUidAttribute()));
                        break;
                    // Since we need columns a any case, just take the first 4 attributes if nothing else
                    // helps
                    default:
                        $cnt = 0;
                        foreach ($data_table->getMetaObject()->getAttributes() as $attr) {
                            if ($attr->isHidden() === false) {
                                $data_table->addColumn($data_table->createColumnFromAttribute($attr));
                                $cnt++;
                            }
                            if ($cnt >= 4) {
                                break;
                            }
                        }
                }
            }
            
            $dataConfigurator = $data_table->getConfiguratorWidget();
            foreach($data_table->getColumns() as $col) {
                if ($col->isHidden() === false && $col->isBoundToAttribute() === true) {
                    if ($col->isBoundToLabelAttribute() === true || ($col->getAttribute()->getRelationPath()->isEmpty() === false && $col->getAttribute()->isLabelForObject() === true)) {
                        $filterAttrAlias = $col->getAttribute()->getRelationPath()->toString();
                    } else {
                        $filterAttrAlias = $col->getAttributeAlias();
                    }
                    if ($filterAttrAlias !== '' || $filterAttrAlias !== null) {
                        $filterWidget = $dataConfigurator->createFilterWidget($filterAttrAlias);
                        if ($filterWidget->getInputWidget() instanceof iSupportMultiSelect) {
                            $filterWidget->getInputWidget()->setMultiSelect(true);
                        }
                        $dataConfigurator->addFilter($filterWidget);
                    }
                }
            }
            
            $this->addWidget($data_table);
            
            if ($data_table->getMetaObject()->hasLabelAttribute() === true) {
                $labelAlias = $data_table->getMetaObject()->getLabelAttributeAlias();
                if (! $data_table->getColumnByAttributeAlias($labelAlias) && ! $data_table->getColumnByDataColumnName($this->getWorkbench()->getConfig()->getOption("METAMODEL.OBJECT_LABEL_ALIAS"))) {
                    $data_table->addColumn($data_table->createColumnFromAttribute($data_table->getMetaObject()->getLabelAttribute()));
                }
            }
        }
        
        return parent::getWidgets($filter);
    }
    
    /**
     * Set to TRUE to allow selection of multiple entries in the lookup dialog.
     * 
     * If the lookup dialog is called from an input widget (e.g. `InputComboTable`) this setting
     * is inherited from that input. Otherwise it is `false` by default.
     * 
     * @uxon-property multi_select
     * @uxon-type boolean
     * @uxon-default false
     * 
     * @param bool $trueOrFalse
     * @return DataLookupDialog
     */
    public function setMultiSelect(bool $trueOrFalse) : DataLookupDialog
    {
        $this->multi_select = $trueOrFalse;
        return $this;
    }
    
    /**
     * 
     * @return bool|NULL
     */
    public function getMultiSelect() : ?bool
    {
       $srcWidget = $this->getParent();
        if ($srcWidget instanceof iUseInputWidget) {
            $inputWidget = $srcWidget->getInputWidget();
            if ($inputWidget && ($inputWidget instanceof iSupportMultiSelect)){
                return $inputWidget->getMultiSelect();
            }
        }
        return null;
    }
    
    /**
     * 
     * @return Data
     */
    public function getDataWidget() : Data
    {
        return $this->getWidgetFirst();
    }
}
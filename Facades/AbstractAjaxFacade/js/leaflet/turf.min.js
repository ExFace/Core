!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports["turf-point"]=r():e["turf-point"]=r()}(self,(()=>(()=>{"use strict";var e={d:(r,t)=>{for(var o in t)e.o(t,o)&&!e.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:t[o]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r);var t={};e.r(t),e.d(t,{areaFactors:()=>a,bearingToAzimuth:()=>x,convertArea:()=>C,convertLength:()=>q,degreesToRadians:()=>S,earthRadius:()=>n,factors:()=>i,feature:()=>s,featureCollection:()=>w,geometry:()=>l,geometryCollection:()=>b,isNumber:()=>M,isObject:()=>j,lengthToDegrees:()=>F,lengthToRadians:()=>A,lineString:()=>y,lineStrings:()=>g,multiLineString:()=>h,multiPoint:()=>p,multiPolygon:()=>v,point:()=>f,points:()=>c,polygon:()=>m,polygons:()=>d,radiansToDegrees:()=>O,radiansToLength:()=>P,round:()=>E,unitsFactors:()=>u,validateBBox:()=>k,validateId:()=>I});var o={};e.r(o),e.d(o,{collectionOf:()=>R,containsNumber:()=>N,featureOf:()=>B,geojsonType:()=>G,getCoord:()=>T,getCoords:()=>L,getGeom:()=>D,getType:()=>J});var n=6371008.8,i={centimeters:100*n,centimetres:100*n,degrees:n/111325,feet:3.28084*n,inches:39.37*n,kilometers:n/1e3,kilometres:n/1e3,meters:n,metres:n,miles:n/1609.344,millimeters:1e3*n,millimetres:1e3*n,nauticalmiles:n/1852,radians:1,yards:1.0936*n},u={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/n,yards:1.0936133},a={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function s(e,r,t){void 0===t&&(t={});var o={type:"Feature"};return(0===t.id||t.id)&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.properties=r||{},o.geometry=e,o}function l(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return f(r).geometry;case"LineString":return y(r).geometry;case"Polygon":return m(r).geometry;case"MultiPoint":return p(r).geometry;case"MultiLineString":return h(r).geometry;case"MultiPolygon":return v(r).geometry;default:throw new Error(e+" is invalid")}}function f(e,r,t){if(void 0===t&&(t={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!M(e[0])||!M(e[1]))throw new Error("coordinates must contain numbers");return s({type:"Point",coordinates:e},r,t)}function c(e,r,t){return void 0===t&&(t={}),w(e.map((function(e){return f(e,r)})),t)}function m(e,r,t){void 0===t&&(t={});for(var o=0,n=e;o<n.length;o++){var i=n[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<i[i.length-1].length;u++)if(i[i.length-1][u]!==i[0][u])throw new Error("First and last Position are not equivalent.")}return s({type:"Polygon",coordinates:e},r,t)}function d(e,r,t){return void 0===t&&(t={}),w(e.map((function(e){return m(e,r)})),t)}function y(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return s({type:"LineString",coordinates:e},r,t)}function g(e,r,t){return void 0===t&&(t={}),w(e.map((function(e){return y(e,r)})),t)}function w(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function h(e,r,t){return void 0===t&&(t={}),s({type:"MultiLineString",coordinates:e},r,t)}function p(e,r,t){return void 0===t&&(t={}),s({type:"MultiPoint",coordinates:e},r,t)}function v(e,r,t){return void 0===t&&(t={}),s({type:"MultiPolygon",coordinates:e},r,t)}function b(e,r,t){return void 0===t&&(t={}),s({type:"GeometryCollection",geometries:e},r,t)}function E(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t}function P(e,r){void 0===r&&(r="kilometers");var t=i[r];if(!t)throw new Error(r+" units is invalid");return e*t}function A(e,r){void 0===r&&(r="kilometers");var t=i[r];if(!t)throw new Error(r+" units is invalid");return e/t}function F(e,r){return O(A(e,r))}function x(e){var r=e%360;return r<0&&(r+=360),r}function O(e){return e%(2*Math.PI)*180/Math.PI}function S(e){return e%360*Math.PI/180}function q(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return P(A(e,r),t)}function C(e,r,t){if(void 0===r&&(r="meters"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=a[r];if(!o)throw new Error("invalid original units");var n=a[t];if(!n)throw new Error("invalid final units");return e/o*n}function M(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function j(e){return!!e&&e.constructor===Object}function k(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!M(e))throw new Error("bbox must only contain numbers")}))}function I(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}function T(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function L(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function N(e){if(e.length>1&&M(e[0])&&M(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return N(e[0]);throw new Error("coordinates must only contain numbers")}function G(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function B(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function R(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0,n=e.features;o<n.length;o++){var i=n[o];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!i.geometry||i.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+i.geometry.type)}}function D(e){return"Feature"===e.type?e.geometry:e}function J(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}function _(e,r,t){var o=!1;r[0][0]===r[r.length-1][0]&&r[0][1]===r[r.length-1][1]&&(r=r.slice(0,r.length-1));for(var n=0,i=r.length-1;n<r.length;i=n++){var u=r[n][0],a=r[n][1],s=r[i][0],l=r[i][1];if(e[1]*(u-s)+a*(s-e[0])+l*(e[0]-u)==0&&(u-e[0])*(s-e[0])<=0&&(a-e[1])*(l-e[1])<=0)return!t;a>e[1]!=l>e[1]&&e[0]<(s-u)*(e[1]-a)/(l-a)+u&&(o=!o)}return o}return"undefined"!=typeof window&&(window.turf={booleanPointInPolygon:function(e,r,t){if(void 0===t&&(t={}),!e)throw new Error("point is required");if(!r)throw new Error("polygon is required");var o=T(e),n=D(r),i=n.type,u=r.bbox,a=n.coordinates;if(u&&!1===function(e,r){return r[0]<=e[0]&&r[1]<=e[1]&&r[2]>=e[0]&&r[3]>=e[1]}(o,u))return!1;"Polygon"===i&&(a=[a]);for(var s=!1,l=0;l<a.length&&!s;l++)if(_(o,a[l][0],t.ignoreBoundary)){for(var f=!1,c=1;c<a[l].length&&!f;)_(o,a[l][c],!t.ignoreBoundary)&&(f=!0),c++;f||(s=!0)}return s},...t,...o}),r})()));
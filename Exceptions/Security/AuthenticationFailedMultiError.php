<?php
namespace exface\Core\Exceptions\Security;

use exface\Core\Exceptions\RuntimeException;
use exface\Core\Interfaces\Exceptions\AuthenticationExceptionInterface;
use exface\Core\Interfaces\Security\AuthenticationProviderInterface;
use exface\Core\Interfaces\Security\AuthenticationTokenInterface;
use exface\Core\Widgets\DebugMessage;
use exface\Core\Interfaces\iCanGenerateDebugWidgets;
use exface\Core\Factories\WidgetFactory;
use exface\Core\Exceptions\InternalError;
use exface\Core\Interfaces\Debug\LogBookInterface;

/**
 * Exception thrown if a multi-provider authentication attempt fails
 *
 * @author Andrej Kabachnik
 *        
 */
class AuthenticationFailedMultiError extends RuntimeException implements AuthenticationExceptionInterface
{
    private $authErrors = [];
    
    private $provider = null;
    
    private $logbook = null;
    
    /**
     * 
     * @param AuthenticationProviderInterface $authProvider
     * @param string $message
     * @param string $alias
     * @param AuthenticationExceptionInterface[] $nestedAuthenticatorErrors
     */
    public function __construct(AuthenticationProviderInterface $authProvider, $message, $alias = null, array $nestedAuthenticatorErrors = [], LogBookInterface $logbook)
    {
        parent::__construct($message, $alias);
        $this->provider = $authProvider;
        $this->authErrors = $nestedAuthenticatorErrors;
        $this->logbook = $logbook;
    }
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Interfaces\Exceptions\ExceptionInterface::getStatusCode()
     */
    public function getStatusCode()
    {
        return 401;
    }
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Interfaces\Exceptions\AuthenticationExceptionInterface::getAuthenticationProvider()
     */
    public function getAuthenticationProvider() : AuthenticationProviderInterface
    {
        return $this->provider;
    }
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Exceptions\RuntimeException::getDefaultAlias()
     */
    public function getDefaultAlias()
    {
        return '7AL3G5P';
    }
    
    /**
     * 
     * @return AuthenticationExceptionInterface[]
     */
    public function getNestedAuthenticatorErrors() : array
    {
        return $this->authErrors;
    }
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Interfaces\Exceptions\AuthenticationExceptionInterface::getAuthenticationToken()
     */
    public function getAuthenticationToken(): ?AuthenticationTokenInterface
    {
        return null;
    }
    
    /**
     * 
     * {@inheritDoc}
     * @see \exface\Core\Interfaces\iCanGenerateDebugWidgets::createDebugWidget()
     */
    public function createDebugWidget(DebugMessage $debugWidget)
    {
        $debugWidget = parent::createDebugWidget($debugWidget);
        
        if ($this->logbook !== null) {
            $debugWidget = $this->logbook->createDebugWidget($debugWidget);
        } else {
            foreach ($this->authErrors as $i => $e) {
                if (! ($e instanceof iCanGenerateDebugWidgets)) {
                    $e = new InternalError($e->getMessage(), null, $e);
                }
                
                $errorTab = $debugWidget->createTab();
                $errorTab->setCaption('Error ' . ($i + 1));
                $debugWidget->addTab($errorTab);
                $errorWidget = WidgetFactory::createDebugMessage($debugWidget->getWorkbench());
                // Make sure each nested error debug widget has its own id space as tabs
                // generated by exceptions seem to have fixed ids
                $errorWidget->setIdSpace($errorWidget->getId());
                $errorWidget = $e->createDebugWidget($errorWidget);
                $errorTab->addWidget($errorWidget);
            }
        }
        
        return $debugWidget;
    }
}